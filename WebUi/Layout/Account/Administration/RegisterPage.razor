@page "/administration/account/identity/add-user"
@using Application.DTOs.Response.Account


<div class="row">
    <div class="col-lg-4"></div>
    <div class="col-lg-4">
        <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
            <div class="card  border-primary  shadow-lg p-5 text-dark" style="opacity:0.8;min-width:350px;border-radius:24px;">
                <div class="card-header text-dark fs-4 border-primary">Add User</div>
                <div class="card-body" style="opacity:1;">
                    <DataAnnotationsValidator/>
                    <FloatingText class="form-control mb-3" Label="Full Name" Placeholder="Manhal" @bind-Value="RegisterModel.Name"/>
                    <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="Manhal@sfsf.com" @bind-Value="RegisterModel.EmailAddress"/>
                    <label class="form-label">Select Role</label>
                    <InputSelect @bind-Value="RegisterModel.Role" class="form-select mp-3">
                        <option>Select Role</option>
                 @if(AvailableRoles!=null){

                        @foreach (var role in AvailableRoles!)
                    {
                        <option value="@role.Name">@role.Name</option>
                    }
                 }
                    </InputSelect>
                    <FloatingText class="form-control mb-3" Type="@PasswordType" Label="User Password"  @bind-Value="RegisterModel.Password"/>
                    <FloatingText class="form-control mb-3" Type="@PasswordType" Label="Confirm Password"  @bind-Value="RegisterModel.ConfirmPassword"/>
                    <a class="btn btn-link text-decoration-none float-end" style="margin-top:-20px;" @onclick="ChangePasswordType"><small>@DisplayText</small></a>
                        
                    <div class="form-group align-content-end">
                        <button class="float-end btn btn-success mt-4 w-50 " type="submit" style="position:absolute;right:0;margin:2px;">Create Account</button>
                    </div>
                    <hr class="text-primary"/>
                </div>
                <div class="card-footer m-t5">
                    <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style:lower-latin;text-align:left"/>
                </div>
            </div>
        </EditForm>
        <Modal @bind-Open="IsOpen" Actions="ButtonActions" BootstrapClass="@BorderClass" CustomStyle="min-width:250px; max-width:300px;">
            <ContentContent>
                <span class="text-center text-muted ">
                    <div class="card border-@BorderClass ">
                        <div class="card-header">Infromation</div>
                        <div class="card-body text-muted">@Message</div>
                    </div>
                </span>
            </ContentContent>
            <ButtonTemplate>
                <div class="d-flex justify-content-center aligh-content-center ">
                    <button class="@ButtonClass btn-sm " value="ok" style="margin-right:5px">Okey</button>
                </div>
            </ButtonTemplate>
        </Modal>
    </div>

</div>

@code {
    public bool IsOpen { get; set; }
    public String? SelectedAction { get; set; }
    string? Message;
    public bool IsOperationSuccess { get; set; } = false;
    string? BorderClass = "border-success rounded p-2 ml-2 mr-2";
    string? ButtonClass = "btn btn-success ";
    public CreateAccountDTO RegisterModel { get; set; } = new();
    private IEnumerable<GetRoleDTO>? AvailableRoles { get; set; } 
    protected async override Task OnInitializedAsync()=> AvailableRoles =await accountService.GetRolesAsync();
    private async Task RegisterAsync()
    {
        try
        {
            ResetButtons();
            var response = await accountService.CreateAccountAsync(RegisterModel);
            if (response.Flag)
            {
                IsOperationSuccess = true;
                SuccessBorderAndButton();
                Message = response.Message;
                IsOpen = true;
            }
            else
            {
                IsOperationSuccess = false;
                Message = response.Message;
                DangerBorderAndButton();
                IsOpen = true;
            }
        }
        catch 
        {
            DangerBorderAndButton();
            Message = "Sorry, unknown error occurred";
            IsOpen = true;
            
        }
    }
    void DangerBorderAndButton()
    {
        BorderClass="border-danger rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-danger";
    }
    void SuccessBorderAndButton()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }
    void ResetButtons()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }
    void ButtonActions(string action)
    {
        SelectedAction = action;
        if(action=="ok")
        {
            IsOpen = false;
            if (IsOperationSuccess)
                RegisterModel = new();
        }

    }
    private string? PasswordType = "password";
    private bool PasswordState=true;
    private string DisplayText = "Show";
    void ChangePasswordType()
    {
        PasswordState = !PasswordState;
        if(PasswordState)
        {
            PasswordType = "text";
            DisplayText = "Hide";
        }
        else
        
            {
            PasswordType = "password";
            DisplayText = "Show";
        }
        
    }

}
